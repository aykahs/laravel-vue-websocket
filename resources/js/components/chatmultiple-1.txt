
<template >
  <div>
    <div
      class="modal fade"
      id="exampleModal"
      tabindex="-1"
      role="dialog"
      aria-labelledby="exampleModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-body">
            <!-- <input
              list="list"
              v-model="title"
              class="form-control"
              @change="alerted"
              placeholder="Search Name"
              v-autofocus="true"
            />-->

            <!-- <datalist id="list" v-autofocus="true"> -->
            <select class="form-control" multiple @change="alerted">
              <option v-for="result in results" :key="result.id">{{ result.name }}</option>
            </select>
            <!-- </datalist> -->
          </div>
        </div>
      </div>
    </div>
    <div class="input-group flex-nowrap">
      <input
        type="text"
        v-model="query"
        class="form-control"
        style="width: 76%;"
        placeholder="Add Comment"

      />
    </div>

    {{ user_name }} {{ user }}
  </div>
</template>

<script>
import axios from "axios";
export default {
  data() {
    return {
      query: "",
      results: [],
      title: "",
      user: [],
      user_name: []
    };
  },

  watch: {
    query: function(newQuestion, oldQuestion) {
      const org = newQuestion.split(" ");
      let only = org.filter(s => s[0] == "@");

      this.check(only);

      newQuestion = newQuestion.split(" ");
      oldQuestion = oldQuestion.split(" ");
      newQuestion = newQuestion.filter(x => !oldQuestion.includes(x));
      newQuestion.map(word => {
        if (word.startsWith("@", 0)) {
          // this.title = "";
          $("#exampleModal").modal("show");
        }
      });
    },

    title: function(newQuestion, oldQuestion) {
      if (newQuestion.length >= 2 && newQuestion.length < 5) {
        this.search();
      }
    }
  },
  mounted() {
    this.search();
  },
  methods: {
    search() {
      axios
        .get("api/get-users")
        .then(res => {
          this.results = res.data;
        })
        .catch(err => console.log(err));
    },
    alerted(id) {
      this.results.filter(x => {
        if (x.name == id.target.value) {
          var name = x.name
            .toString()
            .toLowerCase()
            .replace(/\s+/g, "-") // Replace spaces with -
            .replace(/&/g, "-and-") // Replace & with 'and'
            .replace(/[^\w\-]+/g, "") // Remove all non-word characters
            .replace(/\-\-+/g, "-") // Replace multiple - with single -
            .replace(/^-+/, "") // Trim - from start of text
            .replace(/-+$/, "");
          if (!this.user_name.includes(name)) {
            this.query = this.query.concat(name, "#");
            this.user_name.push(name);
            this.user.push(x.id);
          }

          // $("#exampleModal").modal("hide");
        }
      });
    },
    check(only) {

      var y = only.map(word => word.substring(1));


      y = y.join();
      y = y.split("#");

      var array3 = this.user_name.filter(function(item, index) {
        return !y.includes(item);
      });
      if (array3.length != 0) {
        array3.map(x => {
          var z = this.user_name.indexOf(x);
          this.user_name.splice(z, 1);
          this.user.splice(z, 1);
        });
      }
    }
  }
};
</script>

